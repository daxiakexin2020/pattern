# 策略模式
# 定义了一系列的算法，并将每一个算法封装起来，
  而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化，即封装变化的算法。

# 适用场景
## 多个类只区别在表现行为不同，可以使用Strategy模式，在运行时动态选择具体要执行的行为。
## 需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。
## 对客户隐藏具体策略(算法)的实现细节，彼此完全独立。
## 客户端必须知道所有的策略类，并自行决定使用哪一个策略类，
   策略模式只适用于客户端知道所有的算法或行为的情况。
## 策略模式造成很多的策略类，每个具体策略类都会产生一个新类。

# 角色分析
## 抽象策略角色，通常由一个抽象类或者是接口实现，用来定义具体策略的行文等
## 具体策略角色，包装了具体的算法和行为
## 环境角色，持有一个策略类的引用，最终给客户端调用
## 客户端，具体调用方，调用环境角色